import requests
import json
import os
from datetime import datetime
from apscheduler.schedulers.blocking import BlockingScheduler
from dotenv import load_dotenv
load_dotenv()

# üîê –î–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
CLIENT_ID = os.getenv('CLIENT_ID')
CLIENT_SECRET = os.getenv('CLIENT_SECRET')
REDIRECT_URI = os.getenv('REDIRECT_URI')
AUTH_CODE = os.getenv('AUTH_CODE')
TOKEN_PATH = os.getenv('TOKEN_PATH', 'amo_tokens.json')

# üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ —Ñ–∞–π–ª
def save_tokens(data):
    with open(TOKEN_PATH, 'w') as f:
        json.dump(data, f)

# üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞
def load_tokens():
    if os.path.exists(TOKEN_PATH):
        with open(TOKEN_PATH, 'r') as f:
            return json.load(f)
    return None

# üÜï –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –ø–æ –∫–æ–¥—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def get_new_token():
    url = 'https://tech241224.amocrm.ru/oauth2/access_token'
    payload = {
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET,
        'grant_type': 'authorization_code',
        'code': AUTH_CODE,
        'redirect_uri': REDIRECT_URI
    }
    response = requests.post(url, json=payload)
    if response.status_code == 200:
        tokens = response.json()
        save_tokens(tokens)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π access_token –≤ {datetime.now()}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {response.status_code} - {response.text}")

# üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ refresh_token
def refresh_token():
    tokens = load_tokens()
    if not tokens:
        print("‚ö†Ô∏è –¢–æ–∫–µ–Ω–æ–≤ –Ω–µ—Ç ‚Äî –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π")
        get_new_token()
        return

    url = 'https://tech241224.amocrm.ru/oauth2/access_token'
    payload = {
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET,
        'grant_type': 'refresh_token',
        'refresh_token': tokens['refresh_token'],
        'redirect_uri': REDIRECT_URI
    }
    response = requests.post(url, json=payload)
    if response.status_code == 200:
        new_tokens = response.json()
        save_tokens(new_tokens)
        print(f"üîÅ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –≤ {datetime.now()}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status_code} - {response.text}")

# ‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å
if __name__ == '__main__':
    scheduler = BlockingScheduler()
    scheduler.add_job(refresh_token, 'interval', hours=1)  # –æ–±–Ω–æ–≤–ª—è—Ç—å —Ä–∞–∑ –≤ —á–∞—Å
    print("üïí –ó–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª—è—Ç–æ—Ä —Ç–æ–∫–µ–Ω–∞ AmoCRM")
    refresh_token()  # –∑–∞–ø—É—Å–∫ —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    scheduler.start()