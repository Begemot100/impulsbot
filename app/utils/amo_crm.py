import json
import requests
import os
from datetime import datetime

# –ü—É—Ç—å –∫ —Ç–æ–∫–µ–Ω–∞–º AmoCRM
TOKEN_PATH = os.path.join(os.path.dirname(__file__), '../../amo_tokens.json')

# ID –≤–æ—Ä–æ–Ω–∫–∏ –∏ —Å—Ç–∞–¥–∏–∏
PIPELINE_ID = 9239766  # –í–∞—à–∞ –≤–æ—Ä–æ–Ω–∫–∞

DEFAULT_STATUS_ID = 74180478  # ID —Å—Ç–∞–¥–∏–∏ "–ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç"
def load_tokens():
    with open(TOKEN_PATH, 'r') as f:
        return json.load(f)

def get_field_id_by_name(field_name):
    tokens = load_tokens()
    access_token = tokens['access_token']
    headers = {'Authorization': f'Bearer {access_token}'}

    url = 'https://tech241224.amocrm.ru/api/v4/leads/custom_fields'
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        fields = response.json()['_embedded']['custom_fields']
        for field in fields:
            if field['name'].lower() == field_name.lower():
                return field['id']
        print(f"‚ùå –ü–æ–ª–µ '{field_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–µ–π: {response.status_code} - {response.text}")
    return None
print("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:")
print(f"–ò–º—è: {name}")
print(f"Email: {email}")
print(f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}")
print(f"–¢–µ–º–∞: {topic}")
print(f"–§–∞–π–ª: {file_path}")

def create_lead(name, phone, email, message, file_path=None):
    tokens = load_tokens()
    access_token = tokens['access_token']

    headers = {
        'Authorization': f'Bearer {access_token}',
        'Content-Type': 'application/json'
    }

    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–ª—è MESSAGE
    message_field_id = get_field_id_by_name("MESSAGE")
    if not message_field_id:
        print("‚ùå –ü–æ–ª–µ MESSAGE –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return False, "MESSAGE field not found"

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–∫–∏
    lead_data = {
        "name": f"–ó–∞—è–≤–∫–∞ –æ—Ç {name}",
        "pipeline_id": PIPELINE_ID,
        "status_id": DEFAULT_STATUS_ID,
        "created_at": int(datetime.now().timestamp()),
        "custom_fields_values": [
            {
                "field_id": message_field_id,
                "values": [{"value": message}]
            }
        ],
        "_embedded": {
            "contacts": [
                {
                    "name": name,
                    "custom_fields_values": [
                        {"field_code": "PHONE", "values": [{"value": phone}]},
                        {"field_code": "EMAIL", "values": [{"value": email}]}
                    ]
                }
            ]
        }
    }

    try:
        # üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
        res = requests.post(
            'https://tech241224.amocrm.ru/api/v4/leads/complex',
            headers=headers,
            json=[lead_data]
        )

        if res.status_code == 200:
            lead = res.json()['_embedded']['leads'][0]  # ‚úÖ –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –ª–∏–¥
            lead_id = lead['id']
            print(f"‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ID {lead_id}")

            # üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            if file_path and os.path.exists(file_path):
                files_url = f"https://tech241224.amocrm.ru/api/v4/leads/{lead_id}/files"
                file_name = os.path.basename(file_path)
                with open(file_path, 'rb') as f:
                    file_upload = {
                        "file": (file_name, f, "text/plain")
                    }
                    file_resp = requests.post(
                        files_url,
                        headers={'Authorization': f'Bearer {access_token}'},
                        files=file_upload
                    )
                    if file_resp.status_code == 200:
                        print("üìé –§–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –∫ —Å–¥–µ–ª–∫–µ")
                    else:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {file_resp.status_code} - {file_resp.text}")

            return True, lead_id
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏: {res.status_code} - {res.text}")
            return False, res.text

    except Exception as e:
        print(f"üö® –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏: {e}")
        return False, str(e)
